from cmath import log10
from gettext import install
import math
import random
import numpy

K_factor = 0.0025

class Player:
    def __init__(self, skillRating, skillDistribution):
        self.skillRating = skillRating
        self.skillDistribution = skillDistribution

    def updateSkillRating(self, newRating):
        self.skillRating = newRating

    def getSkillRating(self):
        return self.skillRating
    
    def getSkillDistribution(self):
        return self.skillDistribution

class Game:
    def __init__(self):
        self.player_1Outcome = 0
        self.player_2Outcome = 0
        self.player1ExpectedProb = 0
        self.player2ExpectedProb = 0
    
    def expectedProbability(self, player_1: Player, player_2: Player):
        return 1/(1+math.pow(10, (player_2.getSkillRating() - player_1.getSkillRating())))

    def simulateGame(self, player_1: Player, player_2: Player):
        self.player1ExpectedProb = self.expectedProbability(player_1, player_2)
        self.player2ExpectedProb = self.expectedProbability(player_2, player_1)

        player1Distribution = player_1.getSkillDistribution()
        player2Distribution = player_2.getSkillDistribution()
        player1RandNum = numpy.random.gumbel(loc=player1Distribution[0], scale=0.4342944819, size=None)
        player2RandNum = numpy.random.gumbel(loc=player2Distribution[0], scale=0.4342944819, size=None)
        #player1RandNum = random.randint(player1Distribution[0], player1Distribution[1])
        #player2RandNum = random.randint(player2Distribution[0], player2Distribution[1])

        if(player1RandNum > player2RandNum):
            self.player_1Outcome = 1
            self.player_2Outcome = 0
        else:
            self.player_1Outcome = 0
            self.player_2Outcome = 1
        
        self.updateSkillRatings(player_1, player_2)

    def updateSkillRatings(self, player_1: Player, player_2: Player):
        player_1.updateSkillRating(player_1.getSkillRating() + K_factor * (self.player_1Outcome - self.player1ExpectedProb))
        player_2.updateSkillRating(player_2.getSkillRating() + K_factor * (self.player_2Outcome - self.player2ExpectedProb))

playerA = Player(2.1
, [2, 30])
playerB = Player(2.1
, [2.25, 10])
players = [playerA, playerB]

game = Game()

for i in range(0, 1000):
    game.simulateGame(playerA, playerB)
    print(playerA.getSkillRating(), playerB.getSkillRating())
